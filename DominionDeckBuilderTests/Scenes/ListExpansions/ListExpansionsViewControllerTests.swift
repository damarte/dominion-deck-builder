//
//  ListExpansionsViewControllerTests.swift
//  DominionDeckBuilder
//
//  Created by David on 2/2/17.
//  Copyright (c) 2017 damarte. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import XCTest
@testable import DominionDeckBuilder

class ListExpansionsViewControllerTests: XCTestCase
{
    // MARK: - Subject under test
    
    var sut: ListExpansionsViewController!
    var window: UIWindow!
    
    // MARK: - Test lifecycle
    
    override func setUp()
    {
        super.setUp()
        window = UIWindow()
        setupListExpansionsViewController()
    }
    
    override func tearDown()
    {
        window = nil
        super.tearDown()
    }
    
    // MARK: - Test setup
    
    func setupListExpansionsViewController()
    {
        let bundle = Bundle.main
        let storyboard = UIStoryboard(name: "Main", bundle: bundle)
        sut = storyboard.instantiateViewController(withIdentifier: "ListExpansionsViewController") as! ListExpansionsViewController
    }
    
    func loadView()
    {
        window.addSubview(sut.view)
        RunLoop.current.run(until: Date())
    }
    
    // MARK: Test doubles
    
    class ListExpansionsViewControllerOutputSpy: ListExpansionsViewControllerOutput
    {
        var expansions: [Expansion]?
        
        // MARK: Method call expectations
        var fetchExpansionsCalled = false
        
        // MARK: Spied methods
        func fetchExpansions(request: ListExpansions.FetchExpansions.Request)
        {
            fetchExpansionsCalled = true
        }
    }
    
    // MARK: - Tests
    
    func testShouldFetchExpansionsWhenViewIsLoaded()
    {
        // Given
        let listExpansionsViewControllerOutputSpy = ListExpansionsViewControllerOutputSpy()
        sut.output = listExpansionsViewControllerOutputSpy
        
        // When
        loadView()
        
        // Then
        XCTAssert(listExpansionsViewControllerOutputSpy.fetchExpansionsCalled, "Should fetch expansions when the view is loaded")
    }
}
