//
//  ListExpansionsViewControllerTests.swift
//  DominionDeckBuilder
//
//  Created by David on 2/2/17.
//  Copyright (c) 2017 damarte. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import XCTest
@testable import DominionDeckBuilder

class ListExpansionsViewControllerTests: XCTestCase
{
    // MARK: - Subject under test
    
    var sut: ListExpansionsViewController!
    var window: UIWindow!
    
    // MARK: - Test lifecycle
    
    override func setUp()
    {
        super.setUp()
        window = UIWindow()
        setupListExpansionsViewController()
    }
    
    override func tearDown()
    {
        window = nil
        super.tearDown()
    }
    
    // MARK: - Test setup
    
    func setupListExpansionsViewController()
    {
        let bundle = Bundle.main
        let storyboard = UIStoryboard(name: "Main", bundle: bundle)
        sut = storyboard.instantiateViewController(withIdentifier: "ListExpansionsViewController") as! ListExpansionsViewController
    }
    
    func loadView()
    {
        window.addSubview(sut.view)
        RunLoop.current.run(until: Date())
    }
    
    // MARK: Test doubles
    
    class ListExpansionsViewControllerOutputSpy: ListExpansionsViewControllerOutput
    {
        var expansions: [Expansion]?
        
        // MARK: Method call expectations
        var fetchExpansionsCalled = false
        
        // MARK: Spied methods
        func fetchExpansions(request: ListExpansions.FetchExpansions.Request)
        {
            fetchExpansionsCalled = true
        }
    }
    
    class TableViewSpy: UITableView
    {
        // MARK: Method call expectations
        var reloadDataCalled = false
        
        // MARK: Spied methods
        override func reloadData()
        {
            reloadDataCalled = true
        }
    }
    
    // MARK: - Tests
    
    func testShouldFetchExpansionsWhenViewIsLoaded()
    {
        // Given
        let listExpansionsViewControllerOutputSpy = ListExpansionsViewControllerOutputSpy()
        sut.output = listExpansionsViewControllerOutputSpy
        
        // When
        loadView()
        
        // Then
        XCTAssert(listExpansionsViewControllerOutputSpy.fetchExpansionsCalled, "Should fetch expansions when the view is loaded")
    }
    
    func testShouldDisplayFetchedExpansions()
    {
        // Given
        let tableViewSpy = TableViewSpy()
        sut.tableView = tableViewSpy
        
        let displayedExpansions = [ListExpansions.FetchExpansions.ViewModel.DisplayedExpansion(name: "Dominion", numCards: 0)]
        let viewModel = ListExpansions.FetchExpansions.ViewModel(displayedExpansions: displayedExpansions)
        
        // When
        sut.displayFetchedExpansions(viewModel: viewModel)
        
        // Then
        XCTAssert(tableViewSpy.reloadDataCalled, "Displaying fetched expansions should reload the table view")
    }
    
    func testNumberOfSectionsInTableViewShouldAlwaysBeOne()
    {
        loadView()
        
        // Given
        let tableView = sut.tableView
        
        // When
        let numberOfSections = sut.numberOfSections(in: tableView!)
        
        // Then
        XCTAssertEqual(numberOfSections, 1, "The number of table view sections should always be 1")
    }
    
    func testNumberOfRowsInAnySectionShouldEqaulNumberOfOrdersToDisplay()
    {
        loadView()
        
        // Given
        let tableView = sut.tableView
        let testDisplayedExpansions = [ListExpansions.FetchExpansions.ViewModel.DisplayedExpansion(name: "Dominion", numCards: 0)]
        sut.displayedExpansions = testDisplayedExpansions
        
        // When
        let numberOfRows = sut.tableView(tableView!, numberOfRowsInSection: 0)
        
        // Then
        XCTAssertEqual(numberOfRows, testDisplayedExpansions.count, "The number of table view rows should equal the number of objects to display")
    }
    
    func testShouldConfigureTableViewCellToDisplayOrder()
    {
        loadView()
        
        // Given
        let tableView = sut.tableView
        let testDisplayedOrders = [ListExpansions.FetchExpansions.ViewModel.DisplayedExpansion(name: "Dominion", numCards: 0)]
        sut.displayedExpansions = testDisplayedOrders
        
        // When
        let indexPath = IndexPath(item: 0, section: 0)
        let cell = sut.tableView(tableView!, cellForRowAt: indexPath)
        
        // Then
        XCTAssertEqual(cell.textLabel?.text, "Dominion", "A properly configured table view cell should display the title")
        XCTAssertEqual(cell.detailTextLabel?.text, "0 cards", "A properly configured table view cell should display the subtitle")
    }
}
